<script type="text/javascript">

    var map,
        panorama,
        markerArray = [],
        path = [],
        currentBearing,
        currentPosition,
        nextPositionIndex = 1,
        startPosition,
        endPosition,
        moveTimeout = 4500,
        nextPositionMarker,
        misturnCount = 0,
        moveCount = 0,
        musicPlaylist = [],
        currentMusic = 0;

<% if @walk.has_song? %>
    musicPlaylist.push('<%= @walk.youtube_code %>');
<% end %>

    function initialize() {

      google.maps.visualRefresh = true;

      startPosition = new google.maps.LatLng( <%= @walk.walk_points.first %> );
      endPosition = new google.maps.LatLng( <%= @walk.walk_points.last %> );

      // Coffee Shop
      // startPosition = new google.maps.LatLng( -37.784008, 144.983368 );
      // endPosition   = new google.maps.LatLng( -37.787132, 144.982544 );

      // Lettuce Systems
      // startPosition = new google.maps.LatLng( -37.785885, 144.930771 );
      // endPosition   = new google.maps.LatLng( -37.796574, 144.932587 );

      // Flinders to Bar
      // startPosition = new google.maps.LatLng( -37.817497, 144.967575 );
      // endPosition   = new google.maps.LatLng( -37.818649, 144.968704 );

      currentPosition = startPosition;

      var mapOptions = {
        center: currentPosition,
        zoom: 18,
        panControl: false,
        mapTypeControl: false,
        scaleControl: false,    
        zoomControl: false,      
        mapTypeId: google.maps.MapTypeId.HYBRID
      };
      map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);

      var panoramaOptions = {
        position: currentPosition,
        pov: {
          heading: 0,
          pitch: 0
        },
        panControl: false,
        addressControl: false,
        zoomControl: false,
        // linksControl: false
      };
      panorama = new  google.maps.StreetViewPanorama(document.getElementById("streetview"), panoramaOptions);
      google.maps.event.addListener(panorama, 'position_changed', function() {
          if ( path.length > 0 )
            updatePosition();
      });
      map.setStreetView(panorama);

      var directionsDisplay = new google.maps.DirectionsRenderer();
      directionsDisplay.setMap(map);

      var directionsService = new google.maps.DirectionsService();
      var request = {
          origin: currentPosition,
          destination: endPosition,
          travelMode: google.maps.DirectionsTravelMode.WALKING
      };
      directionsService.route(request, function(response, status) {
        if (status == google.maps.DirectionsStatus.OK) {
          // directionsDisplay.setDirections( response );
          processDirections( response );
        }
      });

      document.getElementById('go-on').addEventListener('click', function(e) {
        e.preventDefault();
        console.log('<Move>');
        followPath();
        console.log('</Move>');
      });

    }
    google.maps.event.addDomListener(window, 'load', initialize);

    function endOfWalk() {
      alert('End of Walking');
    }

    function processDirections( directionResult ) {
      path = directionResult.routes[0].overview_path;
      nextPositionMarker = new google.maps.Marker({ position: path[0], map: map });
      followPath();
    }

    function updatePosition() {
      currentPosition = panorama.getPosition();
      // Pan every 3 moves
      if ( moveCount++ % 3 == 0 )
        map.panTo( currentPosition );
      currentBearing = getBearing( currentPosition, path[ nextPositionIndex ] );
      
      // Remove old Marker
      nextPositionMarker.setMap(null);

      for ( var skipIndex=nextPositionIndex; skipIndex < path.length - 1; skipIndex++ ) {
        var distance = google.maps.geometry.spherical.computeDistanceBetween( currentPosition, 
          path[ skipIndex ] );
        if ( distance < 10 ) {
          console.log('Point reached');
          console.log( skipIndex + ' / ' + path.length );
          if ( skipIndex < path.length ) {
            nextPositionIndex = skipIndex + 1;
          } else {
            endOfWalk();
          }
        }
      }

      faceForward();

      nextPositionMarker = new google.maps.Marker({ 
        position: path[ nextPositionIndex ], 
        map: map, 
        title: 'Idx ' + nextPositionIndex + ': ' + path[ nextPositionIndex ].toString() 
      });

      // Check for end
      var distanceFromEnd = google.maps.geometry.spherical.computeDistanceBetween( currentPosition, endPosition );
      if ( distanceFromEnd < 15 ) {
        endOfWalk();
      } else {
        setTimeout(function() {
          followPath();
        }, moveTimeout );
      }

    }

    function followPath() {
      var links = panorama.getLinks(),
        closestLink = links[0];

      for (var i=0; i<links.length; i++) {
        console.log( 'Link ' + i + ': ' + links[i].heading );
        if ( Math.abs( links[i].heading - currentBearing ) < Math.abs( closestLink.heading - currentBearing ) ) {
          closestLink = links[i];
        }
      }
      // Todo, handle no 'next closest link' by checking heading difference
      var difference = Math.abs( closestLink.heading - currentBearing );
      console.log( 'Link Heading: ' + closestLink.heading );
      console.log( 'Current Heading: ' + currentBearing );
      console.log( 'Difference: ' + difference );
      console.log( '--' );
      if ( difference > 25 ) {
        if ( ++misturnCount > 3 ) {
          // Todo Implement Teleporting Again, checking for distance from
          // Sorry, can't walk any more.
          // console.log('Too many bad turns');
          endOfWalk();
          // alert("Cannot turn. Teleporting. Difference is " + difference );
          // panorama.setPosition( path[ nextPositionIndex ] );
          return;
        }
      } else {
        misturnCount = 0;
      }
      panorama.setPano( closestLink.pano );
    }

    function faceForward() {
        console.log( '<Turning>' );
        console.log( 'Current: ' + currentPosition );
        console.log( 'Index: ' + nextPositionIndex );
        console.log( 'Next: ' + path[ nextPositionIndex ]);
        
        currentBearing = getBearing( currentPosition, path[ nextPositionIndex ] );
        if ( currentBearing != null )
          panorama.setPov({ heading: currentBearing, pitch: 0 });  
        console.log( 'Bearing: ' + currentBearing );
        console.log( '</Turning>' );
    }

    function getBearing(origin, destination) {
      if (origin.equals(destination)) {
        return null;
      }
      var lat1 = origin.lat().toRad();
      var lat2 = destination.lat().toRad();
      var dLon = (destination.lng()-origin.lng()).toRad();

      var y = Math.sin(dLon) * Math.cos(lat2);
      var x = Math.cos(lat1)*Math.sin(lat2) -
              Math.sin(lat1)*Math.cos(lat2)*Math.cos(dLon);
      return Math.atan2(y, x).toBrng();
    }


   /**
    * Convert an angle in degrees to radians
    */
    Number.prototype.toRad = function() {
      return this * Math.PI / 180;
    }

   /**
    * Convert an angle in radians to degrees (signed)
    */
    Number.prototype.toDeg = function() {
      return this * 180 / Math.PI;
    }

   /**
    * Convert radians to degrees (as bearing: 0...360)
    */
    Number.prototype.toBrng = function() {
      return (this.toDeg()+360) % 360;
    }

    // YouTube functions

    var player;
    function onYouTubeIframeAPIReady() {

      if ( musicPlaylist.length == 0 )
        return;

      player = new YT.Player('player', {
        height: '390',
        width: '640',
        videoId: musicPlaylist[0],
        events: {
          'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        }
      });

    }

    function onPlayerReady(event) {
      event.target.playVideo();
    }

    function onPlayerStateChange(event) {
      if ( event.data == YT.PlayerState.ENDED ) {
        console.log( 'ENDED' );
        if ( ++currentMusic >= musicPlaylist.length )
          currentMusic = 0;
        event.target.loadVideoById( musicPlaylist[ currentMusic ] );
      }
    }

</script>
<div id="map-container">
  <div id="map-canvas"></div>
  <a id="go-on" href="#">Advance</a>
  <div id="player"></div>
</div>
<script src="https://www.youtube.com/iframe_api"></script>